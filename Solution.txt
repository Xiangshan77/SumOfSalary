因为本题所给数据为员工工资，故使用Big Demical类来进行相关计算，避免出现精度不准确等问题


程序1:
多线程：
采取了生产者消费者模式。
生产者线程负责 产生所需数据并且将此数据存入队列，和插入MongoDB。
消费者线程负责 从队列中读取纪录，并将纪录写入规定的Json文件。

单线程(对比)：
对于产生的每一条纪录均含有写入Json文件和插入数据库的操作。

程序2:
本题瓶颈在于数据库的查询。具体而言，对于多线程模式，瓶颈在于skip()方法。
skip()需要从第一条开始遍历直到遍历数量等于传入参数，但由于每个线程是负责连续的区域，所以总共调用skip的次数为线程总数量。
当找到tradeoff(核数)时，性能最佳。


多线程N：
使用mongoDB提供的 findAll().skip(N*scope).limit(scope) 方法，将线程N所负责的doc区域返回到Cursor中。
读出相关值，使用给定公式计算每位员工当月工资。
将当前结果（当月工资）累加到区域总和tempResults中.
区域总和计算完成后，将值累加给总和sum中。线程N结束
所有线程计算完成后，返回sum值，即为所求总和。   

单线程(对比)：
直接使用fingAll()一次将所有数据存入Cursor中，直接使用总和sum累加每次当前月工资结果。其他与多线程基本类似。
