注： 程序运行时间均为5次结果的中值(median)，时间单位均为毫秒。
电脑配置：CPU：双核 1.4 GHz Intel Core i5
                  内存：4G
程序1(生成＋导入) 运行时间：36285ms (多线程)
                            37353ms (单线程)

程序2（计算总和） 运行时间： 9429ms （多线程）
                             4985ms   (单线程）

Tradeoff: 本机基于两核，过多的线程会导致频繁的上下文切换和系统调用，
开始做题之前估计本题为计算密集型，实际开始后才发现主要瓶颈均在数据库(插入和查询)。

关于程序1:（以下运行时间均为某一单次结果,时间单位均为毫秒）
生成数据部分：1951ms
生成数据＋导入Json文件：5762ms
生成数据＋导入mongoDB数据库： 36419ms
生成数据＋导入Json文件＋导入mongoDB数据库： 37392ms

故而瓶颈为 导入mongoDB数据库。
采用多线程模式：类似生产者消费者模式，线程1负责生成数据和导入数据库，线程2负责导入Json文件。 线程1产生的值将保存在队列中供线程2使用。 
即将实现： 多个生产者，1个消费者模式。多个线程同时向数据库里插入document.


关于程序2－优化历程:
1. 从单线程到多线程，运行时间基本减半。但对于10万以上的数量两种模式都异常漫长。
2.去掉计算部分，运行时长基本不变， 猜测瓶颈为数据库查询。
3.Mongodb数据库萃取相关值方法为：
find(query,field) 到 find(query,field,skip,limit) （结论：运行时间基本无异）(原因：find函数会遍历整个数组，直到找到所有符合条件query的doc.)
4. 之后选择 findOne(query,field)  多线程运行时间为原来的一半。但数据量越大，运行时间成指数增长。
原因：findOne()方法每次从第一条数据开始匹配，对于当前纪录n，需要遍历的条数为(n-1)。每一条均需要如此操作，严重影响性能。

5. 最后发现findAll()函数，一次可以范围内的纪录全部萃取，代价仅为常数级别。所以对于100万数据量，运行时间仅需要5-10秒。


对多核，CPU翻倍的估算：
本程序测试过线程数量从2到10条，
使用findAll()方法，，运行时间最快的为2条线程(瓶颈为skip函数)。
使用findOne()或find()方法， 运行时间最快的为4条线程。

虽然在findAll()方法下，从活动监视器中显示，多线程模式下(23.6%)CPU的利用率为单线程(12.5%)的近乎两倍,但运行时间仍是单线程占优。
所以从findOne()或find()方法出发讨论此题更有意义，并假设此系统支持内核级线程(kernel-level thread)， 
如果CPU核数翻倍，那么同时能执行的线程数量也翻倍，在此分段计算中，每个线程都能独立完成作业，运行时间估计约为现在的一半多一点。
